// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	purchasereceiving "AltaStore/business/purchasereceiving"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeletePurchaseReceiving provides a mock function with given fields: item
func (_m *Repository) DeletePurchaseReceiving(item *purchasereceiving.PurchaseReceiving) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(*purchasereceiving.PurchaseReceiving) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPurchaseReceiving provides a mock function with given fields:
func (_m *Repository) GetAllPurchaseReceiving() (*[]purchasereceiving.PurchaseReceiving, error) {
	ret := _m.Called()

	var r0 *[]purchasereceiving.PurchaseReceiving
	if rf, ok := ret.Get(0).(func() *[]purchasereceiving.PurchaseReceiving); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]purchasereceiving.PurchaseReceiving)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPurchaseReceivingByParameter provides a mock function with given fields: code
func (_m *Repository) GetAllPurchaseReceivingByParameter(code string) (*[]purchasereceiving.PurchaseReceiving, error) {
	ret := _m.Called(code)

	var r0 *[]purchasereceiving.PurchaseReceiving
	if rf, ok := ret.Get(0).(func(string) *[]purchasereceiving.PurchaseReceiving); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]purchasereceiving.PurchaseReceiving)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPurchaseReceivingByCode provides a mock function with given fields: code
func (_m *Repository) GetPurchaseReceivingByCode(code string) (*purchasereceiving.PurchaseReceiving, error) {
	ret := _m.Called(code)

	var r0 *purchasereceiving.PurchaseReceiving
	if rf, ok := ret.Get(0).(func(string) *purchasereceiving.PurchaseReceiving); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*purchasereceiving.PurchaseReceiving)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPurchaseReceivingById provides a mock function with given fields: id
func (_m *Repository) GetPurchaseReceivingById(id string) (*purchasereceiving.PurchaseReceiving, error) {
	ret := _m.Called(id)

	var r0 *purchasereceiving.PurchaseReceiving
	if rf, ok := ret.Get(0).(func(string) *purchasereceiving.PurchaseReceiving); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*purchasereceiving.PurchaseReceiving)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPurchaseReceiving provides a mock function with given fields: item
func (_m *Repository) InsertPurchaseReceiving(item *purchasereceiving.PurchaseReceiving) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(*purchasereceiving.PurchaseReceiving) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePurchaseReceiving provides a mock function with given fields: item
func (_m *Repository) UpdatePurchaseReceiving(item *purchasereceiving.PurchaseReceiving) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(*purchasereceiving.PurchaseReceiving) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
