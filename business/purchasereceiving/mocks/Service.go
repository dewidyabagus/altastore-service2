// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	purchasereceiving "AltaStore/business/purchasereceiving"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeletePurchaseReceiving provides a mock function with given fields: id, deleter
func (_m *Service) DeletePurchaseReceiving(id string, deleter string) error {
	ret := _m.Called(id, deleter)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, deleter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPurchaseReceiving provides a mock function with given fields: finder
func (_m *Service) GetAllPurchaseReceiving(finder string) (*[]purchasereceiving.PurchaseReceiving, error) {
	ret := _m.Called(finder)

	var r0 *[]purchasereceiving.PurchaseReceiving
	if rf, ok := ret.Get(0).(func(string) *[]purchasereceiving.PurchaseReceiving); ok {
		r0 = rf(finder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]purchasereceiving.PurchaseReceiving)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(finder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPurchaseReceivingByParameter provides a mock function with given fields: code, finder
func (_m *Service) GetAllPurchaseReceivingByParameter(code string, finder string) (*[]purchasereceiving.PurchaseReceiving, error) {
	ret := _m.Called(code, finder)

	var r0 *[]purchasereceiving.PurchaseReceiving
	if rf, ok := ret.Get(0).(func(string, string) *[]purchasereceiving.PurchaseReceiving); ok {
		r0 = rf(code, finder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]purchasereceiving.PurchaseReceiving)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(code, finder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPurchaseReceivingByCode provides a mock function with given fields: code, finder
func (_m *Service) GetPurchaseReceivingByCode(code string, finder string) (*purchasereceiving.PurchaseReceiving, error) {
	ret := _m.Called(code, finder)

	var r0 *purchasereceiving.PurchaseReceiving
	if rf, ok := ret.Get(0).(func(string, string) *purchasereceiving.PurchaseReceiving); ok {
		r0 = rf(code, finder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*purchasereceiving.PurchaseReceiving)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(code, finder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPurchaseReceivingById provides a mock function with given fields: id, finder
func (_m *Service) GetPurchaseReceivingById(id string, finder string) (*purchasereceiving.PurchaseReceiving, error) {
	ret := _m.Called(id, finder)

	var r0 *purchasereceiving.PurchaseReceiving
	if rf, ok := ret.Get(0).(func(string, string) *purchasereceiving.PurchaseReceiving); ok {
		r0 = rf(id, finder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*purchasereceiving.PurchaseReceiving)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, finder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPurchaseReceiving provides a mock function with given fields: item, creator
func (_m *Service) InsertPurchaseReceiving(item *purchasereceiving.InsertPurchaseReceivingSpec, creator string) error {
	ret := _m.Called(item, creator)

	var r0 error
	if rf, ok := ret.Get(0).(func(*purchasereceiving.InsertPurchaseReceivingSpec, string) error); ok {
		r0 = rf(item, creator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePurchaseReceiving provides a mock function with given fields: id, item, modifier
func (_m *Service) UpdatePurchaseReceiving(id string, item *purchasereceiving.UpdatePurchaseReceivingSpec, modifier string) error {
	ret := _m.Called(id, item, modifier)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *purchasereceiving.UpdatePurchaseReceivingSpec, string) error); ok {
		r0 = rf(id, item, modifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
